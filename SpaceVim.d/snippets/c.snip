# Control structures {{{
snippet     if
options     head
abbr        if (condition) {expr;}
    if ($1) {
    }

# No head option in else/elseif so it can be expanded after "}"
snippet     else
abbr        else {expr;}
    else {
        $0
    }

snippet     elseif
abbr        else (condition) {expr;}
    else if ($1) {
    }

snippet     ifelse
options     head
alias       ife, ifel
abbr        if (condition) {expr;} else {expr;}
    if ($1) {
    } else {
    }

snippet     for
options     head
abbr        for (i = 0; i < xxx; i++) {expr;}
    for (i = 0; i < ${1}; i++) {
    }

# Counter based for's (don't ask for the type or count start)
snippet     fori
options     head
abbr        for (i = 0; i < xxx; i++) {expr;}
    for (i = 0; i < ${1}; i++) {
    }

# Counter based for's (don't ask for the type or count start)
snippet     forj
options     head
abbr        for (j = 0; j < xxx; j++) {expr;}
    for (j = 0; j < ${1}; j++) {
    }

# For reverse counter
snippet     forri
options     head
abbr        for (i = xxx; i >= 0; i--) {
    for (i = ${1}; i >= 0; i--) {
    }

snippet     while
options     head
abbr        while (cond) {expr;}
    while ($1) {
    }

snippet     dowhile
options     head
abbr        do {expr;} while (cond)
    do {
        $1
    } while ();

snippet     switch
options     head
abbr        switch (key) {case value: expr;break;}
	switch ($1) {
		case :
			break;
	}

snippet     case
options     head
abbr        case: break;
	case ${1}:
		${0}
		break;

# Ternary conditional operator
snippet conditional
    (${1:#:condition}) ? ${2:#:a} : ${3:#:b}

# }}}

# Definition bodies {{{
snippet     function
options     head
alias       func
abbr        int func_name() {xxx;}
    int ${1:#:func_name}()
    {
    }

snippet     struct
options     head
abbr        struct struct_name{xxx;};
    struct ${1:#:name} {
    };

# Typedef struct
snippet     struct_typedef
options     head
    typedef struct ${1:#:name} {
        ${0:TARGET:data}
    };

snippet     enum
options     head
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet     main
options     head
abbr ^^int main(int argc, char* argv[]){xxx; return 0;}
	int main(int argc, char* argv[])
	{
		${0:TARGET}
		return 0;
	}

snippet     helloworld
options     head
abbr        just print helloworld in main function
    #include <stdio.h>
    int main(int argc, char* argv[])
    {
        printf("hello, world!\n");
        return 0;
    }

# }}}

# Preprocessing directives {{{
# #include <...>
snippet     inc
options     head
alias       #inc, #include
abbr        #include <xxx.h>
    #include <${1}>

# #include "..."
snippet     inc2
options     head
alias       #inc2, #include2
abbr        #include "xxx.h"
    #include "${1}"

snippet     #if
options     head
    #if ${1}
    ${0}
    #endif

snippet     ifdef
options     head
alias       #ifdef
abbr        #ifdef ... #endif
    #ifdef ${1:#:SYMBOL}
    ${0}
    #endif

snippet     ifndef
options     head
alias       #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

# This snippet used the placeholder instead of a trailing space
snippet     def
options     head
alias       #def, #define
    #define ${1}

# Include-Guard
snippet     once
options     head
alias       include-guard
abbr #ifndef ... #define ... #endif
    #ifndef ${1:#:SYMBOL}
        #define $1

        ${0:TARGET}
    #endif /* end of include guard */

# }}}

# Built-in function calls {{{
snippet printf
abbr    printf("xxx\n");
    printf("${1}\n");

snippet printk
abbr    printk("xxx\n");
    printk("${1}\n");

snippet scanf
abbr    scanf("...", ...);
    scanf("${1}", ${2});

snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n");

snippet open
abbr    open
    open(${1}, );

snippet read
abbr    read
    read(${1}, ,);

snippet write
abbr    write
    write(${1}, ,);

snippet fopen
abbr fopen("...", "...");
	fopen("${1:PATH}", "${2:MODE}");
	${0:TARGET}
	fclose(${3:FD});

snippet fgets
abbr    fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:stdin});

snippet fscanf
abbr    fscanf(file, "...", ...);
    fscanf(${1:stdin}, "${2}", ${3});

snippet fwrite
abbr    fwrite(......, file)
    fwrite(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet fread
abbr    fread(......, file)
    fread(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet memcpy
abbr    memcpy(dest, src, nbytes)
    memcpy($1, , );

snippet malloc
abbr    malloc(size)
	($2 *)malloc(${1:N_MEMBERS} * sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet calloc
abbr    calloc(n, size)
	($2 *)calloc(${1:N_MEMBERS}, sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet realloc
abbr    realloc(old, size)
	($3 *)realloc(${1:OLD}, ${2:N_MEMBERS} * sizeof(${3:TYPE}));
	${0}

snippet seed_rand
    srand(time(NULL));
# }}}

# Built-in operators and alias {{{
snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet sizeof
alias   size
    sizeof(${0:TARGET})

snippet sizeof_array
alias   array_size
    (sizeof(${1:#:array}) / sizeof(*($1)))

snippet _Static_assert
alias   _static_assert
options head
    _Static_assert(${1:#:condition}, ${2:#:message});

snippet static_assert
options head
    static_assert(${1:#:condition}, ${2:#:message});

snippet _Generic
alias   generic, select
    _Generic(${1:#:expression}, ${2:#:association-list})

snippet va_list
options head
abbr    va_start(va_list, last_arg); ... ; va_end()
	va_list ${1:ap};
	va_start($1, ${2:LAST_ARG});
	${0}
	va_end($1);
# }}}

# Comments {{{
snippet comment
alias   /*
    /* ${1:#:comment} */
    ${0}

snippet     doxy
abbr        /** @brief ...
options     head
    /**
     * @brief    ${1:function description}
     *
     * @details  ${2:detailed description}
     *
     * @param    ${3:param}
     *
     * @return   ${4:return type}
     */

# }}}

# vim: fdm=marker
